#include <bits/stdc++.h>
using namespace std; 


// works on principle of divide and conquer 
// Requires pivote which will divide in part(not necessary to be half like merge sort)
//process of findnig the pivote is partition


int partition(int arr[],int low,int high){
  int pivote = arr[high]; 
  //here, i keeps the track of number of element less than pivote
  // also keeps track of right element which is smaller than pivote
  int i =  low -1 ,temp ;

  //j will findout element less than pivote 
  for(int j =low ;j<high -1 ;j++){
    if(arr[j]<pivote){
      i++ ;
      // swap i and j for required positioning
      temp = arr[i];
      arr[i] = arr[j];
      arr[j] =temp;
    }
  }
  temp =arr[i] ;
  arr[i+1] = arr[high] ;
  arr[high] =temp ;
  return i+1 ;
}


void quicksort(int arr[],int low,int high){
  if(low>=high)
    return ;
  int pivote = partition(arr,low,high);
  quicksort(arr,low,pivote -1) ;
  quicksort(arr,pivote-1 ,high);

}
int main(){
  int n;
  cin >> n;
  int arr[n] ;
  for(int i=0;i<n;i++){
    cin >> arr[i];
  }
  quicksort(arr,0,n-1) ;
  for(int i=0;i<n;i++){
    cout <<  arr[i];
  }
  return 0;
}



