

//from Tutorial point 
//correct
/*
#include<iostream>
using namespace std;
void swapping(int &a, int &b) {     //swap the content of a and b
   int temp;
   temp = a;
   a = b;
   b = temp;
}
void display(int *array, int size) {
   for(int i = 0; i<size; i++)
      cout << array[i] << " ";
   cout << endl;
}
void merge(int *array, int l, int m, int r) {
   int i, j, k, nl, nr;
   //size of left and right sub-arrays
   nl = m-l+1; nr = r-m;
   int larr[nl], rarr[nr];
   //fill left and right sub-arrays
   for(i = 0; i<nl; i++)
      larr[i] = array[l+i];
   for(j = 0; j<nr; j++)
      rarr[j] = array[m+1+j];
   i = 0; j = 0; k = l;
   //marge temp arrays to real array
   while(i < nl && j<nr) {
      if(larr[i] <= rarr[j]) {
         array[k] = larr[i];
         i++;
      }else{
         array[k] = rarr[j];
         j++;
      }
      k++;
   }
   while(i<nl) {       //extra element in left array
      array[k] = larr[i];
      i++; k++;
   }
   while(j<nr) {     //extra element in right array
      array[k] = rarr[j];
      j++; k++;
   }
}

void mergeSort(int *array, int l, int r) {
   int m;
   if(l < r) {
      int m = l+(r-l)/2;
      // Sort first and second arrays
      mergeSort(array, l, m);
      mergeSort(array, m+1, r);
      merge(array, l, m, r);
   }
}
int main() {
   int n;
   cout << "Enter the number of elements: ";
   cin >> n;
   int arr[n];     //create an array with given number of elements
   cout << "Enter elements:" << endl;
   for(int i = 0; i<n; i++) {
      cin >> arr[i];
   }
   cout << "Array before Sorting: ";
   display(arr, n);
   mergeSort(arr, 0, n-1);     //(n-1) for last index
   cout << "Array after Sorting: ";
   display(arr, n);
   }

*/


//By Bhavesh 
// wromg output



#include <bits/stdc++.h>
using namespace std; 



//merge sort is done by recursion
//merging two sorted array in single sorted array

// diving the array in two halves  

// [1] [6] [7] [8] [0] [4] [5] [9]
// Left        Mid            Right
// From two array we have to check wich eelement will go to proper position to make the array sorted
// divde and conquer is used here 

//merge sort consist of two steps first to merge and then to sort

void merge(int arr[] ,int left ,int mid ,int right){
  
  //n1 =number of element in left array 
  //n2= number of element in right array 
  int n1 =mid-left+1, n2 =right -mid,i,j,k;
  int leftarr[n1],rightarr[n2];
  
  //creation of left array
  for(i=0;i<n1;i++){
    leftarr[i] =arr[left+i]; //(left is considered as zeroth index)(leftarr is the subarray of divided left part) 
  }
  
  //creation of right array
  for(int i=0;i<n1;i++){
    rightarr[i] =arr[right+i]; //right is considered as nth index (rightarr is the subarray of divided right part)
  }
  
  //merging the subarrays 
  i=0,j=0,k=left ;  // k is the left index of the merged subarray
  

  // which so ever will be smaller will be filled in the array
  while(i<=n1 && j<=n2){

    if(leftarr[i]<= rightarr[i])   //if left array is smaller than ...
      arr[k++] = leftarr[i++];
    else arr[k++] = rightarr[j++] ;  //else right array..
  }

//remaining  elements in array 
while(i<n1)         //extra element in left array
  arr[k++]=leftarr[i++];

while(j<n2)          //extra element in right array
  arr[k++] =rightarr[j++];
}


void MergeSort(int arr[] ,int left ,int right){
  if(left >= right)
    return ;

  int mid =left + (right-left) / 2;

  MergeSort(arr,left,mid);
  MergeSort(arr,mid+1,right);
  merge(arr,left,mid,right) ;
}



int main(){
   int n;
   cin >> n;
   int arr[n];
   for(int i=0;i<n;i++){
    cin >>arr[i];
  }
  MergeSort(arr,0,n-1);

  for(int i=0;i<n;i++){
    cout<< arr[i]<<" ";
    cout<<endl;
  }
  return 0;
}
