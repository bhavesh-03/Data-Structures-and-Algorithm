#include<bits/stdc++.h>
using namespace std;

//insertion is done at the end 
//deletion is done from the front

//front == front element of linkedlist
//rear == rear element of linked list

//next =next element in the list
//enqueue will be (front rear and item)
/*
for removing consider front = temp;
front = front+1; and remove temp
*/

typedef struct Node{
    int data;
    struct Node*next;
}Node;

typedef struct Queue{
    Node *front;
    Node *rear;
}Queue;

//function to create new node;
Node *createNode(int data){
    Node *newNode =(Node *)malloc(sizeof(Node));
    newNode ->data=data;
    newNode ->next  =nullptr;
    return newNode;
}

//function to create a Queue
Queue* createQueue(){
    Queue*qu =(Queue*)malloc(sizeof(Queue));
    qu->front=nullptr;
    qu->rear = nullptr;
    return qu;
}

//Enqueue function
void Enqueue(Queue* queue,int data){
    Node *newNode =createNode(data);
    if(queue->rear==nullptr){
        queue->rear=newNode;
        queue->front=newNode;
        return ;
    }
    queue->rear->next=newNode;
    queue->rear=newNode;
} 

int dequeue(Queue *queue){
    if(queue->front ==nullptr)
       return INT_MIN;

    Node *temp =queue->front;
    queue->front =queue->front->next;   

    if(queue->front==nullptr){
        queue->front = nullptr;
        queue->rear=nullptr;
    }
    int data=temp->data;
    free(temp);
    return data;

}

int main(){
    Queue *queue =createQueue();
    int n;
    cin >>n;
    for(int i=0;i<n;i++){
        int ele;
        cin>>ele;
        Enqueue(queue,ele);
    }
cout<<dequeue(queue)<<endl;
cout<<dequeue(queue)<<endl;
    
    cout<<"queue rear "<<queue->rear->data<<endl;
    cout<<"queue front : "<<queue->front->data<<endl;
    return 0;
}
