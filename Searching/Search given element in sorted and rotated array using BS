#include <bits/stdc++.h>

using namespace std;

// find pivot point
// check if element exist before pivote or after pivote
// apply binary search on corresponding part


//pivot is when a[i-1] > a[i]    50 --10-- 20 30 40  

int binarySearch(int arr[] ,int start ,int end ,int key){
    if(end<start){
        return -1; 
    }
    int mid= start +(end-start)/2;
    if(key==arr[mid])
        return mid;
    if(key >arr[mid])
        return binarySearch(arr ,mid+1, end ,key) ;
    return binarySearch(arr,start ,mid-1,key );        
}

int findPivot(int arr[] ,int start , int end){
    if(end<start) return -1 ;

    int mid = start +(end - mid)/2;
    
    if(mid<end && arr[mid] >arr[mid+1])
        return mid+1 ;
    if(mid>start && arr[mid]<arr[mid-1])
        return mid;
    if(arr[mid] <arr[start]) 
       return findPivot(arr ,start ,mid-1);
    return findPivot (arr,mid+1,end) ;   
} 
int findkey(int arr[] , int n , int key ){
    int pivot = findPivot(arr, 0 ,n-1);
    if (pivot == -1)
        return binarySearch(arr , 0 , n-1 ,key);
    if(arr[pivot]==key)   
        return pivot;
    if(arr[0]<key)
        return binarySearch(arr, 0 ,pivot-1,key);
    return binarySearch(arr,pivot+1,n-1,key);         
} 

int main(){
    int t ;
    cin >> t ;
    while(t--){
        int n,key ;
        cin >> n;
        int arr[n];

    for(int i =0 ; i<n; i++){
        cin >> arr[i] ;
    }
    cin >> key ;
    int indexdata= binarySearch(arr, 0 , n-1 ,key) ;
    cout<< indexdata;
    }
}
