//Implementation of Insertion in Binary search Tree

// root -- NULL   return 
// key>root   -- return root->right ;
// key<root   -- return root->left ;
// return root

#include <bits/stdc++.h>
using namespace std ;

typedef struct Node{
  int data;
  Node *left, *right ;
}Node ;

Node *createNode(int key){
  Node *newNode = (Node*)malloc(sizeof(Node)) ;
  newNode->data = key ; 
  newNode->left = NULL ;
  newNode->right = NULL ;
  return newNode ;
}
Node* root = NULL;

Node *insertNode(Node *node , int key){
  if(node==NULL){
    node=createNode(key ) ;
    return node ;
  }
  if(key<node->data){
    node->left = insertNode(node->left,key) ;
  }else if(key>node->data){
    node->right = insertNode(node->right,key) ;
  }
  return node ;
}


void addNode(int key){
  root= insertNode(root, key) ;
}


Node *searchkey(Node*node,int key){
  if(node==NULL || node->data==key)
     return node ;
  if(key<node->data){
    return searchkey(node->left,key) ;
  }else{
    return searchkey(node->right,key) ;
  }   
}

void search(int key){
  Node*node=searchkey(root,key);
  if(node!=NULL){
    cout<<"Key"<<" "<<key<<" "<<"is found"<<endl;
  }else{
    cout<<"Key"<<" "<<key<<" "<<"is not found"<<endl;
  }
}

void preOrder(Node *node) {
  if(node!=NULL){
    cout<<node->data<<" " ;
    preOrder(node->left) ;
    preOrder(node->right) ;
  }
}

void InOrder(Node *node) {
  if(node!=NULL){
    InOrder(node->left) ;
    cout<<node->data<<" " ;
    InOrder(node->right) ;
  }
}


int main(){
  int n ;
  cin>> n ;
  for(int i=0;i<n;i++)
  {
    int ele; 

    cin>>ele ;
    addNode(ele) ;
  }

  cout<<"Preorder"<< endl ;
  preOrder(root);
  cout<<endl;
  cout<<"Inorder "<<endl;
  InOrder(root);
  cout<<endl;
  
  cout<<" search 25 "<<endl;
  search(25);
  cout<<endl;
  return 0 ;

}
