//Height and Depth of the tree are same 

// for height   max(l,r)+1;
// for size     l+r+1 ;

// Post Order
// Left   right   root 
// Time complexity   o(n)
// Space complexity   o(1)   --
// Space complexity   o(1)   -- Recursive Code

// Inorder 
// Left   Root   Right

// Tree Traversal

// Pre order    root   left    right
// Inorfer      Left   root    right
// Post order   Left   right   Root
                                                            
// // Preorder Traversal

#include <bits/stdc++.h> 

using namespace std ;

typedef struct Node {
	int data ;
	Node *left ; 
    Node * right ;
};

Node *root = NULL ;
Node* createNode(int data) {
	Node *newNode = (Node*)malloc(sizeof(Node)) ;
	newNode->data=data;
	newNode->left =NULL ; 
	newNode->right =NULL ;

	return newNode ;
}

 
int maxHeight(Node* node){
	if(node==NULL){
		return 0;
	}
	   int l = maxHeight(node->left) ;
	   int r = maxHeight(node->right) ;

	return max(l,r)+1 ;
} 

int size(Node* node){
     if(node==NULL){
		return 0 ;
	 }else{
            return (size(node->left)+size(node->right)+1) ;
	 }
}

int main(){
	root = createNode(7) ;
	root->left=createNode(6) ;
	root->right=createNode(5) ;
	root->left->left= createNode(4);
	root->left->right=  createNode(3) ;
	root->right->left=createNode(2) ;

	cout<<"Max Height  " ;
	cout<<endl;
	cout<<maxHeight(root) <<endl; ;

	cout<<"Max size " <<endl;
	cout<<size(root)<<endl;
	

	return 0 ;
}
