#include<bits/stdc++.h>
using namespace std;
struct Node{
    int data;
    struct Node *next;
};
struct Node *head = NULL;
void InsertBeg(int x)
{
    struct Node *newNode=new Node();
    if(!newNode)
    {
        cout<<"Memory Error!!\n";
        return;
    }
    newNode->data=x;
    newNode->next=newNode;
    if(head==NULL)
        head=newNode;
    else
    {
        struct Node *temp=head;
        while((temp->next)!=head)
            temp=temp->next;
        newNode->next=head;
        temp->next=newNode;
        head=newNode;
    }
}
void InsertEnd(int x)
{
    struct Node *newNode=new Node();
    if(!newNode)
    {
        cout<<"Memory Error!!\n";
        return;
    }
    newNode->data=x;
    newNode->next=newNode;
    if(head==NULL)
    {
        head=newNode;
    }
    else
    {
        struct Node *temp=head;
        while(temp->next!=head)
            temp=temp->next;
        newNode->next=head;
        temp->next=newNode;
    }
}
void InsertPos(int pos,int x)
{
    struct Node *newNode=new Node();
    if(!newNode)
    {
        cout<<"Memory Error!!\n";
        return;
    }
    newNode->data=x;
    if(head==NULL)
    {
        head=newNode;
    }
    else
    {
        int k=1;
        struct Node *p=head,*q;
        while(k<pos && (p->next)!=head)
        {
            k++;
            q=p;
            p=p->next;
        }
        if(k!=pos)
        {
            cout<<"Desired position does not exist!!\n";
            return;
        }
        else
        {
            newNode->next=p;
            q->next=newNode;
        }
    }
}
void DeleteBeg()
{
    if(head==NULL)
    {
        cout<<"Empty List!!\n";
        return;
    }
    struct Node *temp=head;
    struct Node *temp2=head;
    while(temp->next!=head)
        temp=temp->next;
    temp->next=head->next;
    head=head->next;
    delete(temp2);
}
void DeleteEnd()
{
    if(head==NULL)
    {
        cout<<"Empty List!!\n";
        return;
    }
    struct Node *p=head,*q;
    while(p->next!=head)
    {
        q=p;
        p=p->next;
    }
    q->next=head;
    free(p);
}
void DeletePos(int pos)
{
    if(head==NULL)
    {
        cout<<"Empty List!!\n";
        return;
    }
    struct Node *p=head,*q;
    int k=1;
    while(k<pos && (p->next)!=head)
    {
        k++;
        q=p;
        p=p->next;
    }
    if(k!=pos)
    {
        cout<<"Desired position does not exist!!\n";
        return;
    }
    q->next=p->next;
    delete(p);
}
void Print()
{
    struct Node *p=head;
    if(head==NULL)
        return;
    do
    {
        cout<<p->data<<" ";
        p=p->next;
    }while(p!=head);
    cout<<"\n";
}
int main()
{
    InsertBeg(1);
    InsertEnd(5);
    InsertPos(2,4);
    InsertPos(2,3);
    InsertPos(3,2);
    Print();

    DeleteBeg();
    Print();
    DeleteEnd();
    Print();
    DeletePos(7);
    Print();
    DeletePos(2);
    Print();
}
