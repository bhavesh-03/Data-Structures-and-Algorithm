// Shortest Source to Destination Path
// GFG

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
    int shortestDistance(int N, int M, vector<vector<int>> A, int X, int Y) {
        if(A[X][Y]==0){
            return -1;
        }
        if(A[0][0]==0){
            return -1;
        }
        vector<vector<int>>vis(N,vector<int>(M,0)) ;
        queue<pair<pair<int,int>,int>>q;
        q.push({{0,0},0});
        vis[0][0]=1;
        int dx[] = {0,0,-1,1};
        int dy[] = {1,-1,0,0};
        while(!q.empty()){
            int row = q.front().first.first;
            int col = q.front().first.second;
            int steps = q.front().second ;
            
            q.pop();
            
            if(row==X && col==Y){
                return steps;
            }
            for(int i=0;i<4;i++){
                int newR = row+dx[i];
                int newC = col+dy[i];
                if(newR >=0 && newR<N && newC >=0 && newC<M && A[newR][newC]==1 && !vis[newR][newC]){
                    q.push({{newR,newC},steps+1});
                    vis[newR][newC]=1;
                }
            }
        }
        return -1; 
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int N, M, x, y;
        cin >> N >> M;
        vector<vector<int>> v(N, vector<int>(M));
        for (int i = 0; i < N; i++)
            for (int j = 0; j < M; j++) cin >> v[i][j];
        cin >> x >> y;
        Solution ob;
        cout << ob.shortestDistance(N, M, v, x, y) << "\n";
    }
}
