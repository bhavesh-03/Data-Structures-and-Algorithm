// Priority Queue
// Usage::
// Find max/min ;
// Priority Scheduling

// Opertions
// Find max/min;
// Deletion
// Insertions

// Heap is a tree with specific porperty

// HEAPS:
// Min Heap
// Bottom up approach
// Top down approach

// Parent child  = i-1 /2
// Left child  2*i+1
// Right child  2*i+2

// Algo used is BUILD HEAPS
// For non leaft it starts form   (n/2-1)
// Build heap takes (logn)
// heapification takes (n) -- n/2+1

// Buttom up appraoch
// #include <bits/stdc++.h>
// using namespace std;

// int left(int i)
// {
//     return (2 * i) + 1;
// }
// int parent(int i)
// {
//     return (i - 1) / 2;
// }
// int right(int i)
// {
//     return ((2 * i) + 2);
// }

// void heapify_down(int heap[], int n, int i)
// {
//     int l = left(i);
//     int r = right(i);
//     // int l = left[i] ;
//     int s = i; // s==smaller
//     if (l < n && heap[l] < heap[i])
//     {
//         s = l;
//     }
//     if (r < n && heap[r] < heap[s])
//     {
//         s = r;
//     }
//     if (s != i)
//     {
//         swap(heap[i], heap[s]);
//         heapify_down(heap, n, s);
//     }
// }
// void build_heap(int heap[], int n)
// {
//     for (int i = (n / 2 - 1); i >= 0; i--)
//     {
//         heapify_down(heap, n, i);
//     }
// }

// void print_heap(int heap[], int n)
// {
//     for (int i = 0; i < n; i++)
//     {
//         cout << heap[i] << " ";
//     }
//     cout << endl;
// }
// int size;
// int main()
// {
//     int t;
//     cin >> t;
//     while (t--)
//     {
//         size = 0;
//         int n;
//         cin >> n;
//         int heap[n];
//         for (int i = 0; i < n; i++)
//         {
//             cin >> heap[i];
//             size++;
//         }
//         build_heap(heap, n);
//         print_heap(heap, n);
//     }
//     return 0;
// }

#include <bits/stdc++.h>
using namespace std;

int parent(int i)
{
    return (i - 1) / 2;
}

int left(int i)
{
    return 2 * i + 1;
}
int right(int i)
{
    return 2 * i + 2;
}

void insert(int heap[], int i, int val)
{
    heap[i] = val;
    while (i != 0 && heap[parent(i)] > heap[i])
    {
        swap(heap[parent(i)], heap[i]);
        i = parent(i);
    }
}

void print_heap(int heap[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << heap[i] << " ";
    }
    cout << endl;
}
int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        int n;
        cin >> n;
        int heap[n];
        int ele;
        for (int i = 0; i < n; i++)
        {
            cin >> ele;
            insert(heap, i, ele);
        }
        print_heap(heap, n);
    }
}
