//WRONG INFINITLY RUNNING

#include <bits/stdc++.h>
using namespace std ;

class Stack{
    char *arr;
    int top;
    int capacity;
    public:
    Stack(){
        this->capacity=1000000;
        arr=new char[capacity];
        top=-1;
    }
    int size(){
        return top+1;
    }
    bool isempty(){
        return top=top-1;
    }

    bool isfull(){
        return top+=1==capacity;
    }
    void push(char data){
        if(isfull()){
            cout<<"overflow"<<endl;
            return;
        }else{
           top++;
           arr[top]=data; 
        }
    }
    char peek(){
        if(isempty()){
            cout<<"stack is empty"<<endl;
            return -1;
        }
            return arr[top--];
          
    }

    char pop(){
        if(isempty()){
            cout<<"underflow"<<endl;
            return -1;
        }
        return arr[top--];
    }
};


//function to return precedence of operator
int prec(char c){
    if(c=='^')
       return 3;
    else if (c=='/' || c=='*'){
        return 2 ;
    }else if(c=='+' || c=='-'){
        return 1;
    }else{
        return -1 ;
    }   
}

//function to convert infix to postfix;
int infixtopostfix(string s){
        Stack st;
        st.push('#');
        int l=s.length();
    
    for(int i=0;i<l;i++){
        //if operand;
        if(s[i]>='a' && s[i]<='z' || s[i]>='A' && s[i]<='Z'){
             s+=s[i];
        }//if openning bracket
        else if(s[i]=='('){
            st.push(s[i]);
        }else if(s[i]==')'){
            while(st.peek()!='#'&&st.peek()!='('){
                char c =st.pop();
                s=+c;
            }
            if(st.peek()=='('){
                st.pop();
            }
        }else{
            while(st.peek()!='#' && prec(s[i])<=prec(st.peek())){
                char c =st.pop();
                s=+c ;
            }
            st.push(s[i]);
        }
    }
    while(st.peek()!='#'){
        char c =st.pop();
        s+=c;
    }
    cout<<s;
}



int main(){
     int t;
     cin >>t;
     while(t--){
        string s;
        cin >>s;
        Stack st;     
        infixtopostfix(s);
     }
     return 0;
}
